# ============================================================================
# üß¨ LysoData-Miner ‚Äì SIMPLE ROOT MAKEFILE
# ----------------------------------------------------------------------------
# –û–¥–∏–Ω —Ñ–∞–π–ª ‚Üí –ø–æ–Ω—è—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.  –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥:
#   DEV  ‚Äì –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (docker-compose.dev)
#   PROD ‚Äì –ø—Ä–æ–¥–∞–∫—à–Ω (docker-compose.production)
# ----------------------------------------------------------------------------
#   make help            ‚Äì —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
#   make dev-start       ‚Äì –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (DB+backend+frontend)
#   make dev-stop        ‚Äì –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dev-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
#   make dev-logs        ‚Äì –ª–æ–≥–∏ dev
#   make prod-start      ‚Äì –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω-—Å—Ç–µ–∫
#   make prod-stop       ‚Äì –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω-—Å—Ç–µ–∫
#   make prod-logs       ‚Äì –ª–æ–≥–∏ –ø—Ä–æ–¥–∞–∫—à–Ω
#   make db-backup       ‚Äì —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤ –±–∞–∑—ã (prod)
#   make db-restore BACKUP=path.sql.gz ‚Äì –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É (prod)
# ----------------------------------------------------------------------------
# –ü–æ–¥—Ä–æ–±–Ω—ã–µ Makefile'—ã –∏–∑ config/ –æ—Å—Ç–∞—é—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∑–∞–¥–∞—á, –Ω–æ –Ω–µ
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –≤—ã–≤–æ–¥ help.
# ============================================================================

.PHONY: help dev-start dev-stop dev-backend dev-frontend dev-status dev-logs prod-start prod-stop prod-build prod-restart prod-status prod-logs db-backup db-restore dev-env

##### ÔøΩÔøΩ –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ###################################################
# –ò—Å–ø–æ–ª—å–∑—É–µ–º docker compose (–ø–ª–∞–≥–∏–Ω Docker >= 20.10)
DC ?= docker compose

# DEV –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
DEV_COMPOSE   := config/docker/docker-compose.dev.yml
DEV_ENV       := .env.dev

# PROD –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
PROD_COMPOSE  := docker-compose.production.yml
PROD_ENV      := .env.production

# –¶–≤–µ—Ç–∞
B := \033[34m
G := \033[32m
Y := \033[33m
R := \033[31m
X := \033[0m

##### üìñ HELP ################################################################
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
	@echo "$${B}üß¨ LysoData-Miner ‚Äì Makefile –∫–æ–º–∞–Ω–¥—ã$${X}"
	@echo "$${B}=======================================$${X}\n"
	@grep -E '^[a-zA-Z0-9_-]+:.*?## ' $(MAKEFILE_LIST) | \
		sort | \
		awk 'BEGIN {FS = ":.*?## "} {printf "  \033[36m%-18s\033[0m %s\n", $$1, $$2}'
	@echo "\n$${Y}DEV —Å—Ç–µ–∫:$${X} http://localhost:3000  API ‚Üí :8000  DB ‚Üí :5433 (–∏–ª–∏ –≤ .env.dev)"
	@echo "$${Y}PROD —Å—Ç–µ–∫:$${X} http://localhost:3000  API ‚Üí :8000  DB ‚Üí :5434 (–∏–ª–∏ –≤ .env.production)"

##### üóÇ DEV env helper #######################################################

dev-env: ## üîë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å .env.dev
	@if [ ! -f $(DEV_ENV) ]; then \
	  echo "$(Y)‚ö†Ô∏è  $(DEV_ENV) –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é...$(X)"; \
	  if [ -f env.dev.example ]; then cp env.dev.example $(DEV_ENV); else touch $(DEV_ENV); fi; \
	  echo "$(G)‚úÖ $(DEV_ENV) —Å–æ–∑–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!$(X)"; \
	fi

##### üõ† DEV –ö–û–ú–ê–ù–î–´ ##########################################################

dev-start: dev-env ## ÔøΩÔøΩ –ó–∞–ø—É—Å—Ç–∏—Ç—å DEV —Å—Ç–µ–∫ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç prod)
	@echo "$(Y)‚ÑπÔ∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–¥–∞–∫—à–Ω-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç—ã...$(X)"; \
	$(DC) -f $(PROD_COMPOSE) --env-file $(PROD_ENV) down --remove-orphans || true
	$(DC) -f $(DEV_COMPOSE) --env-file $(DEV_ENV) up -d

dev-backend: dev-env ## üêç –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend (DEV)
	$(DC) -f $(DEV_COMPOSE) --env-file $(DEV_ENV) up -d backend

dev-frontend: dev-env ## ‚öõÔ∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å frontend (DEV)
	$(DC) -f $(DEV_COMPOSE) --env-file $(DEV_ENV) up -d frontend

dev-stop: dev-env ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å DEV —Å—Ç–µ–∫
	$(DC) -f $(DEV_COMPOSE) --env-file $(DEV_ENV) down

dev-status: dev-env ## üìä –°—Ç–∞—Ç—É—Å DEV –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	$(DC) -f $(DEV_COMPOSE) --env-file $(DEV_ENV) ps

dev-logs: dev-env ## üìã –õ–æ–≥–∏ DEV (follow)
	$(DC) -f $(DEV_COMPOSE) --env-file $(DEV_ENV) logs -f

##### üöÄ PROD –ö–û–ú–ê–ù–î–´ #########################################################

prod-start: ## üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å PROD —Å—Ç–µ–∫ (—Å –±–∏–ª–¥–æ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
	$(DC) -f $(PROD_COMPOSE) --env-file $(PROD_ENV) up -d --build
	@echo "$${G}‚úÖ PROD –∑–∞–ø—É—â–µ–Ω ‚Üí Frontend http://localhost:$$(grep -E '^WEB_PORT=' $(PROD_ENV) | cut -d'=' -f2 || echo 3000)$${X}"

prod-stop: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PROD —Å—Ç–µ–∫
	$(DC) -f $(PROD_COMPOSE) --env-file $(PROD_ENV) down

prod-build: ## üèóÔ∏è  –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—ã PROD
	$(DC) -f $(PROD_COMPOSE) --env-file $(PROD_ENV) build

prod-restart: ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å PROD —Å—Ç–µ–∫
	$(MAKE) prod-stop
	$(MAKE) prod-start

prod-status: ## üìä –°—Ç–∞—Ç—É—Å PROD –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	$(DC) -f $(PROD_COMPOSE) --env-file $(PROD_ENV) ps

prod-logs: ## üìã –õ–æ–≥–∏ PROD (follow)
	$(DC) -f $(PROD_COMPOSE) --env-file $(PROD_ENV) logs -f

##### üíæ –ë—ç–∫–∞–ø—ã ###############################################################

db-backup: ## üíæ –°–æ–∑–¥–∞—Ç—å backup –±–∞–∑—ã (prod)
	@mkdir -p backups
	@FILE=backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz; \
	docker exec lysodata_db pg_dump -U lysobacter_user lysobacter_db | gzip > $$FILE && \
	echo "$${G}‚úÖ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $$FILE$${X}"

db-restore: ## ‚ôªÔ∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É (–∏—Å–ø–æ–ª—å–∑—É–π BACKUP=—Ñ–∞–π–ª.sql.gz)
	@if [ -z "$(BACKUP)" ]; then \
		echo "$${R}‚ùå –£–∫–∞–∂–∏—Ç–µ BACKUP=/path/to/file.sql.gz$${X}"; exit 1; fi
	@gunzip -c $(BACKUP) | docker exec -i lysodata_db psql -U lysobacter_user -d lysobacter_db
	@echo "$${G}‚úÖ –ë–∞–∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ $(BACKUP)$${X}"
