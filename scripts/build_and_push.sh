#!/bin/bash

# üê≥ Build and Push LysoData-Miner Images to Docker Hub
# 
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–±–∏—Ä–∞–µ—Ç Docker –æ–±—Ä–∞–∑—ã –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∏—Ö –Ω–∞ Docker Hub
# –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º gimmyhat

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOCKER_HUB_USER="gimmyhat"
BACKEND_IMAGE="lysodata-backend"
FRONTEND_IMAGE="lysodata-frontend"
VERSION=${1:-latest}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_step() {
    echo -e "${BLUE}üîÑ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Docker Hub
check_docker_login() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Docker Hub..."
    
    if ! docker info | grep -q "Username: $DOCKER_HUB_USER"; then
        print_warning "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Docker Hub"
        print_step "–í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é..."
        docker login
    fi
    
    print_success "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Docker Hub —É—Å–ø–µ—à–Ω–∞"
}

# –°–±–æ—Ä–∫–∞ backend –æ–±—Ä–∞–∑–∞
build_backend() {
    print_step "–°–±–æ—Ä–∫–∞ backend –æ–±—Ä–∞–∑–∞..."
    
    cd backend
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Dockerfile
    if [ ! -f "Dockerfile" ]; then
        print_error "backend/Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
    docker build \
        -t "$DOCKER_HUB_USER/$BACKEND_IMAGE:$VERSION" \
        -t "$DOCKER_HUB_USER/$BACKEND_IMAGE:latest" \
        .
    
    cd ..
    print_success "Backend –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
}

# –°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞
build_frontend() {
    print_step "–°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞..."
    
    cd frontend
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Dockerfile
    if [ ! -f "Dockerfile" ]; then
        print_error "frontend/Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
    docker build \
        -t "$DOCKER_HUB_USER/$FRONTEND_IMAGE:$VERSION" \
        -t "$DOCKER_HUB_USER/$FRONTEND_IMAGE:latest" \
        .
    
    cd ..
    print_success "Frontend –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
}

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤
push_images() {
    print_step "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤ –Ω–∞ Docker Hub..."
    
    # Push backend
    print_step "–ü—É–±–ª–∏–∫–∞—Ü–∏—è backend –æ–±—Ä–∞–∑–∞..."
    docker push "$DOCKER_HUB_USER/$BACKEND_IMAGE:$VERSION"
    if [ "$VERSION" != "latest" ]; then
        docker push "$DOCKER_HUB_USER/$BACKEND_IMAGE:latest"
    fi
    
    # Push frontend
    print_step "–ü—É–±–ª–∏–∫–∞—Ü–∏—è frontend –æ–±—Ä–∞–∑–∞..."
    docker push "$DOCKER_HUB_USER/$FRONTEND_IMAGE:$VERSION"
    if [ "$VERSION" != "latest" ]; then
        docker push "$DOCKER_HUB_USER/$FRONTEND_IMAGE:latest"
    fi
    
    print_success "–í—Å–µ –æ–±—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–∞—Ö
show_images_info() {
    print_step "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–∞—Ö:"
    echo ""
    echo -e "${YELLOW}üì¶ Backend –æ–±—Ä–∞–∑:${NC}"
    echo "   üê≥ $DOCKER_HUB_USER/$BACKEND_IMAGE:$VERSION"
    echo "   üê≥ $DOCKER_HUB_USER/$BACKEND_IMAGE:latest"
    echo ""
    echo -e "${YELLOW}üì¶ Frontend –æ–±—Ä–∞–∑:${NC}"
    echo "   üê≥ $DOCKER_HUB_USER/$FRONTEND_IMAGE:$VERSION"
    echo "   üê≥ $DOCKER_HUB_USER/$FRONTEND_IMAGE:latest"
    echo ""
    echo -e "${YELLOW}üöÄ –î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:${NC}"
    echo "   docker-compose -f docker-compose.hub.yml up -d"
    echo ""
    echo -e "${YELLOW}üåê Docker Hub URLs:${NC}"
    echo "   https://hub.docker.com/r/$DOCKER_HUB_USER/$BACKEND_IMAGE"
    echo "   https://hub.docker.com/r/$DOCKER_HUB_USER/$FRONTEND_IMAGE"
}

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
cleanup_local() {
    if [ "$2" = "--cleanup" ]; then
        print_step "–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        docker rmi "$DOCKER_HUB_USER/$BACKEND_IMAGE:$VERSION" 2>/dev/null || true
        docker rmi "$DOCKER_HUB_USER/$FRONTEND_IMAGE:$VERSION" 2>/dev/null || true
        if [ "$VERSION" != "latest" ]; then
            docker rmi "$DOCKER_HUB_USER/$BACKEND_IMAGE:latest" 2>/dev/null || true
            docker rmi "$DOCKER_HUB_USER/$FRONTEND_IMAGE:latest" 2>/dev/null || true
        fi
        print_success "–õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã –æ—á–∏—â–µ–Ω—ã"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}üê≥ LysoData-Miner Docker Hub Publishing Script${NC}"
    echo -e "${BLUE}=============================================${NC}"
    echo ""
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [VERSION] [--cleanup] [--no-push]"
        echo ""
        echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
        echo "  VERSION   - –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: latest)"
        echo "  --cleanup - —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        echo "  --no-push - —Ç–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞, –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Docker Hub"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0                    # –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è latest"
        echo "  $0 v1.0.0             # –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è v1.0.0"
        echo "  $0 v1.0.0 --cleanup   # –° –æ—á–∏—Å—Ç–∫–æ–π –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤"
        echo "  $0 latest --no-push   # –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞"
        exit 0
    fi
    
    print_step "–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–æ–≤ (–≤–µ—Ä—Å–∏—è: $VERSION)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    NO_PUSH=false
    for arg in "$@"; do
        if [ "$arg" = "--no-push" ]; then
            NO_PUSH=true
            break
        fi
    done
    
    check_dependencies
    
    if [ "$NO_PUSH" = "false" ]; then
        check_docker_login
    fi
    
    build_backend
    build_frontend
    
    if [ "$NO_PUSH" = "false" ]; then
        push_images
    else
        print_step "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é (--no-push)"
    fi
    
    show_images_info
    cleanup_local "$@"
    
    echo ""
    print_success "üéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    print_step "–û–±—Ä–∞–∑—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ docker-compose.hub.yml"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@" 