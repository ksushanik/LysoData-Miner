#!/bin/bash

# üöÄ Deploy LysoData-Miner from Docker Hub
# 
# –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
COMPOSE_FILE="docker-compose.hub.yml"
ENV_FILE=".env"
ENV_EXAMPLE="env.hub.example"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_step() {
    echo -e "${BLUE}üîÑ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã Docker Compose
get_docker_compose_cmd() {
    if command -v docker-compose &> /dev/null; then
        echo "docker-compose"
    else
        echo "docker compose"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null && ! command -v docker &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Docker
    if ! docker info &> /dev/null; then
        print_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_config() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    if [ ! -f "$COMPOSE_FILE" ]; then
        print_error "–§–∞–π–ª $COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    if [ ! -f "$ENV_FILE" ]; then
        if [ -f "$ENV_EXAMPLE" ]; then
            print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∏–∑ –ø—Ä–∏–º–µ—Ä–∞..."
            cp "$ENV_EXAMPLE" "$ENV_FILE"
            print_warning "‚ö†Ô∏è  –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!"
            print_warning "–û—Å–æ–±–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –∏ –ø–æ—Ä—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"
        else
            print_error "–§–∞–π–ª $ENV_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–∞!"
            exit 1
        fi
    fi
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
    
    source "$ENV_FILE"
    
    ports_to_check=(
        "${DB_PORT:-5434}"
        "${BACKEND_PORT:-8000}"
        "${WEB_PORT:-3000}"
    )
    
    for port in "${ports_to_check[@]}"; do
        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            print_warning "–ü–æ—Ä—Ç $port —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        fi
    done
    
    print_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p data/postgres
    mkdir -p data/pgadmin
    mkdir -p backups
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
pull_images() {
    print_step "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –∏–∑ Docker Hub..."
    
    source "$ENV_FILE"
    
    docker pull "gimmyhat/lysodata-backend:${BACKEND_VERSION:-latest}"
    docker pull "gimmyhat/lysodata-frontend:${FRONTEND_VERSION:-latest}"
    docker pull "postgres:15-alpine"
    docker pull "dpage/pgadmin4:latest"
    
    print_success "–û–±—Ä–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    print_step "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    DOCKER_COMPOSE=$(get_docker_compose_cmd)
    
    $DOCKER_COMPOSE -f "$COMPOSE_FILE" --env-file "$ENV_FILE" up -d
    
    print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_services() {
    print_step "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    source "$ENV_FILE"
    
    # –ñ–¥–µ–º backend
    echo -n "–û–∂–∏–¥–∞–Ω–∏–µ backend API..."
    for i in {1..30}; do
        if curl -sf "http://localhost:${BACKEND_PORT:-8000}/api/health/" >/dev/null 2>&1; then
            echo -e " ${GREEN}‚úÖ${NC}"
            break
        fi
        echo -n "."
        sleep 2
    done
    
    # –ñ–¥–µ–º frontend
    echo -n "–û–∂–∏–¥–∞–Ω–∏–µ frontend..."
    for i in {1..30}; do
        if curl -sf "http://localhost:${WEB_PORT:-3000}" >/dev/null 2>&1; then
            echo -e " ${GREEN}‚úÖ${NC}"
            break
        fi
        echo -n "."
        sleep 2
    done
    
    print_success "–°–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
show_status() {
    print_step "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo ""
    
    source "$ENV_FILE"
    
    DOCKER_COMPOSE=$(get_docker_compose_cmd)
    
    $DOCKER_COMPOSE -f "$COMPOSE_FILE" --env-file "$ENV_FILE" ps
    
    echo ""
    echo -e "${GREEN}üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:${NC}"
    echo "   Frontend:  http://localhost:${WEB_PORT:-3000}"
    echo "   Backend:   http://localhost:${BACKEND_PORT:-8000}"
    echo "   API Docs:  http://localhost:${BACKEND_PORT:-8000}/docs"
    echo "   Database:  localhost:${DB_PORT:-5434}"
    echo "   pgAdmin:   http://localhost:${PGADMIN_PORT:-8080} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    echo ""
    echo -e "${YELLOW}üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:${NC}"
    echo "   $DOCKER_COMPOSE -f $COMPOSE_FILE logs -f"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–∞—Ö
show_images_info() {
    print_step "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã:"
    echo ""
    
    source "$ENV_FILE"
    
    echo -e "${YELLOW}üì¶ Backend:${NC}  gimmyhat/lysodata-backend:${BACKEND_VERSION:-latest}"
    echo -e "${YELLOW}üì¶ Frontend:${NC} gimmyhat/lysodata-frontend:${FRONTEND_VERSION:-latest}"
    echo -e "${YELLOW}üì¶ Database:${NC} postgres:15-alpine"
    echo -e "${YELLOW}üì¶ Admin:${NC}    dpage/pgadmin4:latest"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}üöÄ LysoData-Miner Docker Hub Deployment${NC}"
    echo -e "${BLUE}=======================================${NC}"
    echo ""
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [COMMAND]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  pull      - –û–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–∑—ã —Å Docker Hub"
        echo "  clean     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0                # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  $0 status         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
        echo "  $0 logs           # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
        exit 0
    fi
    
    DOCKER_COMPOSE=$(get_docker_compose_cmd)
    
    case "${1:-start}" in
        "start")
            check_dependencies
            check_config
            check_ports
            create_directories
            pull_images
            start_services
            wait_for_services
            show_status
            show_images_info
            echo ""
            print_success "üéâ LysoData-Miner —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!"
            ;;
        "stop")
            print_step "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            $DOCKER_COMPOSE -f "$COMPOSE_FILE" down
            print_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            ;;
        "restart")
            print_step "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            $DOCKER_COMPOSE -f "$COMPOSE_FILE" down
            sleep 2
            $DOCKER_COMPOSE -f "$COMPOSE_FILE" --env-file "$ENV_FILE" up -d
            print_success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
            ;;
        "status")
            show_status
            ;;
        "logs")
            $DOCKER_COMPOSE -f "$COMPOSE_FILE" logs -f
            ;;
        "pull")
            pull_images
            print_success "–û–±—Ä–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
            ;;
        "clean")
            print_warning "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)"
            read -r response
            if [[ "$response" =~ ^[Yy]$ ]]; then
                $DOCKER_COMPOSE -f "$COMPOSE_FILE" down -v --rmi all
                rm -rf data/ backups/
                print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            else
                print_step "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
            fi
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            print_step "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ $0 --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@" 