version: '3.8'

services:
  # PostgreSQL Database (using existing configuration)
  postgres:
    image: postgres:15-alpine
    container_name: lysodata_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lysobacter_db}
      POSTGRES_USER: ${POSTGRES_USER:-lysobacter_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lysobacter_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${DB_PORT:-5434}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/schema:/var/lib/postgresql/schema:ro
      - ./database/examples:/var/lib/postgresql/examples:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lysobacter_user} -d ${POSTGRES_DB:-lysobacter_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - lysodata_network

  # FastAPI Backend
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: lysodata_backend
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-lysobacter_db}
      - POSTGRES_USER=${POSTGRES_USER:-lysobacter_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-lysobacter_password}
      - DEBUG=true
      - RELOAD=true
    ports:
      - "8000:8000"
    volumes:
      - ../../backend:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lysodata_network
    labels:
      - "com.lysodata.service=backend"
      - "com.lysodata.description=FastAPI backend server"

  # React Frontend
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: lysodata_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
    ports:
      - "3000:80"
    volumes:
      - ../../frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - lysodata_network
    labels:
      - "com.lysodata.service=frontend"
      - "com.lysodata.description=React frontend development server"

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: lysodata_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lysodata_network
    labels:
      - "com.lysodata.service=admin"
      - "com.lysodata.description=pgAdmin interface for database management"
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
    labels:
      - "com.lysodata.volume=database"
  pgadmin_data:
    driver: local
    labels:
      - "com.lysodata.volume=admin"

networks:
  lysodata_network:
    driver: bridge
    labels:
      - "com.lysodata.network=main" 